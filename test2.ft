\ vim:ft=forth:ts=2:sw=2:expandtab:foldmethod=marker:foldmarker=\\\ --\ ,\\\ ---:

\ -----------------------------------------------------------------------------
\ -- Constants, variables and memory buffers

code init-cold  $4902 $3E04 $6030 $0008 $46F7 $0080 $0800 end-code
code init-latest$4902 $3E04 $6030 $0008 $46F7 $0084 $0800 end-code
code init-dp    $4902 $3E04 $6030 $0008 $46F7 $0088 $0800 end-code
code init-vp    $4902 $3E04 $6030 $0008 $46F7 $008C $0800 end-code
code dp         $4902 $3E04 $6030 $0008 $46F7 $0000 $2000 end-code
code vp         $4902 $3E04 $6030 $0008 $46F7 $0004 $2000 end-code
code latest     $4902 $3E04 $6030 $0008 $46F7 $0008 $2000 end-code
code state      $4902 $3E04 $6030 $0008 $46F7 $000C $2000 end-code
code (source)   $4902 $3E04 $6030 $0008 $46F7 $0010 $2000 end-code
code source#    $4902 $3E04 $6030 $0008 $46F7 $0014 $2000 end-code
code >in        $4902 $3E04 $6030 $0008 $46F7 $0018 $2000 end-code
code current    $4902 $3E04 $6030 $0008 $46F7 $001C $2000 end-code
code base       $4902 $3E04 $6030 $0008 $46F7 $0020 $2000 end-code
code hp         $4902 $3E04 $6030 $0008 $46F7 $0024 $2000 end-code
code tib#       $4902 $3E04 $6030 $0008 $46F7 $0080 $0000 end-code
code ram-top    $4902 $3E04 $6030 $0008 $46F7 $4000 $2000 end-code
code bl         $4902 $3E04 $6030 $0008 $46F7 $0020 $0000 end-code
code cpuid      $4902 $3E04 $6030 $0008 $46F7 $ED00 $E000 end-code
code emulator-uart-tx $4902 $3E04 $6030 $0008 $46F7 $0000 $E000 end-code
code emulator-uart-rx $4902 $3E04 $6030 $0008 $46F7 $0004 $E000 end-code
code emulator-uart-sr $4902 $3E04 $6030 $0008 $46F7 $0008 $E000 end-code
code s0         $4902 $3E04 $6030 $0008 $46F7 $0C00 $2000 end-code
code r0         $4902 $3E04 $6030 $0008 $46F7 $0D00 $2000 end-code
code tib        $4902 $3E04 $6030 $0008 $46F7 $1000 $2000 end-code

\ -----------------------------------------------------------------------------
\ -- Machine interface

code halt       $E7FE $46F7 end-code
code reset-handler $4668 $3820 $0006 $4801 $6800 $4687 $0080 $0800 end-code
code bye        $2118 $B402 $BEAB $46F7 end-code
code wait-key   $2182 $B402 $BEAB $46F7 end-code

\ Compiler and control flow

code lit        $4674 $3C01 $8821 $3402 $8822 $0412 $4311 $3403 $3E04 $6030 $0008 $46A7 end-code
code >branch    $1040 $4906 $0002 $12D2 $4B05 $401A $4311 $0002 $0412 $4B04 $401A $4311 $0008 $46F7 $F400 $F800 $03FF $0000 $0000 $7FFF $46F7 end-code
code branch     $4672 $3A01 $8811 $8852 $0412 $4311 $468F end-code
code ?branch    $0001 $6830 $3604 $2900 $D002 $4671 $3104 $468F $4672 $3A01 $8811 $8852 $0412 $4311 $468F end-code
code exit       $BD00 end-code

\ -----------------------------------------------------------------------------
\ -- Stack operations

code dup        $3E04 $6030 $46F7 end-code
code drop       $6830 $3604 $46F7 end-code
code swap       $6831 $6030 $0008 $46F7 end-code
code over       $3E04 $6030 $6870 $46F7 end-code
code rot        $6873 $6832 $0001 $6072 $6031 $0018 $46F7 end-code
code ?dup       $2800 $D001 $3E04 $6030 $46F7 end-code
code nip        $3604 $46F7 end-code
code tuck       $6831 $6030 $3E04 $6031 $46F7 end-code
code 2dup       $6831 $3E08 $6070 $6031 $46F7 end-code
code 2swap      $68B3 $6872 $6831 $60B1 $6070 $6033 $0010 $46F7 end-code

: -rot          rot rot ;
: 2drop         drop drop ;

code >r         $0001 $6830 $3604 $B402 $46F7 end-code
code r>         $BC02 $3E04 $6030 $0008 $46F7 end-code
code r@         $9900 $3E04 $6030 $0008 $46F7 end-code
code rdrop      $BC10 $46F7 end-code

code sp@        $4631 $3E04 $6030 $0008 $46F7 $46F7 end-code
code rp@        $4669 $3E04 $6030 $0008 $46F7 $46F7 end-code
code sp!        $4606 $4631 $3904 $6808 $46F7 $46F7 end-code
code rp!        $0001 $6830 $3604 $468D $46F7 $46F7 end-code

\ -----------------------------------------------------------------------------
\ -- Memory operations

code c@         $7800 $46F7 end-code
code c!         $6831 $7001 $6870 $3608 $46F7 end-code
code h@         $8800 $46F7 end-code
code h!         $6831 $8001 $6870 $3608 $46F7 end-code
code @          $6800 $46F7 end-code
code !          $0002 $6830 $3604 $0001 $6830 $3604 $8011 $3202 $0C09 $8011 $46F7 end-code

\ -----------------------------------------------------------------------------
\ -- Logical operators

code and        $6831 $3604 $4008 $46F7 end-code
code or         $6831 $3604 $4308 $46F7 end-code
code invert     $43C0 $46F7 end-code
code not        $43C0 $46F7 end-code
code xor        $6831 $3604 $4048 $46F7 end-code
code aligned    $3003 $2103 $43C9 $4008 $46F7 end-code

\ -----------------------------------------------------------------------------
\ -- Arithmetic

code +          $6831 $3604 $1840 $46F7 end-code
code -          $6831 $3604 $1A08 $46F7 end-code
code *          $6831 $3604 $4348 $46F7 end-code
code u/mod      $6831 $0002 $4614 $460B $085B $429C $D801 $0064 $E7FB $2300 $18DB $42A1 $D301 $3301 $1B09 $0864 $4294 $D2F7 $6031 $0018 $46F7 end-code
code abs        $2800 $DA01 $43C0 $3001 $46F7 end-code

code 1+         $3001 $46F7 end-code
code 2+         $3002 $46F7 end-code
code 4+         $3004 $46F7 end-code
code 1-         $3801 $46F7 end-code
code 2-         $3802 $46F7 end-code
code 4-         $3804 $46F7 end-code
code char+      $3001 $46F7 end-code
code cell+      $3004 $46F7 end-code
code char-      $3801 $46F7 end-code
code cell-      $3804 $46F7 end-code
code 2/         $1040 $46F7 end-code
code 2*         $1800 $46F7 end-code

code lshift     $6831 $3604 $4081 $0008 $46F7 end-code
code rshift     $0000 $6831 $3604 $40C1 $0008 $46F7 end-code
code shl        $0040 $46F7 end-code
code shr        $0840 $46F7 end-code

code 0=         $2300 $2800 $D100 $43DB $0018 $46F7 end-code
code 0<>        $2300 $2800 $D000 $43DB $0018 $46F7 end-code
code 0<         $2300 $2800 $DA00 $43DB $0018 $46F7 end-code
code 0<=        $2300 $2800 $DC00 $43DB $0018 $46F7 end-code
code 0>         $2300 $2800 $DD00 $43DB $0018 $46F7 end-code
code 0>=        $2300 $2800 $DB00 $43DB $0018 $46F7 end-code
code =          $6831 $3604 $2300 $4288 $D100 $43DB $0018 $46F7 end-code
code <          $6831 $3604 $2300 $4281 $DA00 $43DB $0018 $46F7 end-code
code u<         $6831 $3604 $2300 $4281 $D200 $43DB $0018 $46F7 end-code

: 2c@           c@ swap c@ swap ;
: +!            dup @ rot + swap ! ;
: -!            dup @ rot - swap ! ;

: cell          4 ;
: chars         ;
: cells         2* 2* ;
: /             u/mod nip ;
: umod          u/mod drop ;
: mod           u/mod drop ;
: >             swap < ;
: u>            swap u< ;
: <>            = invert ;
: <=            > invert ;
: >=            < invert ;
: within        over - >r - r> u< ;

: true          0 invert ;
: false         0 ;
: negate        invert 1+ ;

: umin          2dup u> if swap then drop ;
: umax          2dup u< if swap then drop ;
: min           2dup > if swap then drop ;
: max           2dup < if swap then drop ;

: 2@            dup @ cell+ @ ;
: 2!            tuck ! cell+ ! ;

: pick          ?dup if 1- cells sp@ + @ else dup then ;
: 2over         >r >r 2dup r> r> 2swap ;

\ -----------------------------------------------------------------------------
\ -- Strings and chars

: uppercase     dup $61 $7B within $20 and xor ;
: /string       rot over + -rot - ;
: 1/string      1- swap 1+ swap ;
: count         dup 1+ swap c@ ;
: ci@=          c@ uppercase swap c@ uppercase = ;
: cappend       1 over +! dup c@ + c! ;
: digit?        dup $39 > $80 2*  and +
                dup $A0 2* > $83 2* 1+ and -
                $30 - dup base @ u< ;

\ -----------------------------------------------------------------------------
\ -- Compiler

: here          dp @ ;
: allot         here + dp ! ;
: org           dp ! ;
: ,             here ! cell allot ;
: h,            here h! 2 allot ;
: c,            here c! 1 allot ;

: [             false state ! ; immediate
: ]             true state ! ; immediate
: ,call         here cell+ - >branch , ;
: literal       postpone lit , ; immediate
: execute       1+ >r ;

\ -----------------------------------------------------------------------------
\ -- Control flow

: if            postpone ?branch here cell allot ; immediate
: else          postpone branch here cell allot here rot ! ; immediate
: then          here swap ! ; immediate
: begin         here ; immediate
: again         postpone branch , ; immediate
: until         postpone ?branch , ; immediate
: while         postpone ?branch here cell allot ; immediate
: repeat        swap postpone branch ,
                here swap ! ; immediate

: (do)          r> -rot >r 1- >r >r ;
: i             r> r> r@ -rot >r >r ;
: j             rp@ 4 cells + @ ;
: unloop        r> rdrop rdrop >r ;
: (loop)        r> r> r> 1+ 2dup < if 2drop true else >r >r false then
                swap >r ;
: do            postpone (do) here ; immediate
: loop          postpone (loop)
                postpone ?branch , ; immediate

\ -----------------------------------------------------------------------------
\ -- Strings and chars continued

: si=           ( c-addr1 c-addr2 -- f )
                dup c@ 1+ begin >r 2dup ci@= r> tuck and while
                  1- rot 1+ rot 1+ rot
                repeat -rot 2drop 0= ;

\ -----------------------------------------------------------------------------
\ -- Input handling

: pad           vp @ $80 2* 2* + ;
: wp            pad $80 + ;
: source@       (source) @ >in @ + c@ ;
: >>source      1 >in +! ;
: in-source?    >in @ source# @ < ;
: skip          begin source@ over = in-source? and while >>source repeat drop ;
: copy          begin source@ over <> in-source? and while
                  source@ wp cappend   >>source
                repeat in-source? if >>source then drop ;
: word          0 wp tuck c! swap dup skip copy ;
: char          bl word 1+ c@ ;

\ -----------------------------------------------------------------------------
\ -- Input/Output

: emit          emulator-uart-tx ! ;
: key           wait-key emulator-uart-rx @ ;
: key?          emulator-uart-sr @ ;
: count         dup 1+ swap c@ ;
: cr            #13 emit #10 emit ;
: space         bl emit ;
: spaces        begin ?dup 0> while space 1- repeat ;
: type          begin dup 0> while swap dup c@ emit 1+ swap 1- repeat 2drop ;
: xon           $11 emit ;
: xoff          $13 emit ;

: <#            pad hp ! ;
: hold          1 hp -! hp @ c! ;
: >digit        dup 9 > 7 and + #48 + ;
: #             base @ u/mod swap >digit hold ;
: #s            begin # dup 0= until ;
: #>            drop hp @ pad over - ;
: sign          0< if $2D hold then ;
: u.            <# #s #> type space ;
: .             <# dup abs #s swap sign #> type space ;

: binary        #2 base ! ;
: octal         #8 base ! ;
: decimal       #10 base ! ;
: hex           #16 base ! ;

: accept        ( c-addr +n -- +n'   get line from terminal )
                over + 1- over
                begin key
                dup $0A <> while
                  dup emit
                  dup 8 = if  drop 1-  >r over r> umax
                          else  over c!  1+ over umin
                  then
                repeat
                drop nip swap - ;

: depth         s0 sp@ - 2/ 2/ 1- ;
: .s            depth if dup u.
                  sp@ begin dup s0 < while dup @ u. cell+ repeat drop
                then ;
: .r            rp@ begin dup r0 < while dup @ u. cell+ repeat drop ;

\ -----------------------------------------------------------------------------
\ -- Memory continued

: fill          swap >r swap begin r@ 0>
                  while 2dup c! 1+ r> 1- >r
                repeat
                rdrop 2drop ;
: move          >r begin r@ 0> while
                  over @ over ! 4+ swap 4+ swap
                  r> 4- >r
                repeat rdrop 2drop ;
: hmove         >r begin r@ 0> while
                  over h@ over h! 2+ swap 2+ swap
                  r> 2- >r
                repeat rdrop 2drop ;
: cmove         >r begin r@ 0> while
                  over c@ over c! 1+ swap 1+ swap
                  r> 1- >r
                repeat rdrop 2drop ;

\ -----------------------------------------------------------------------------
\ -- Dictionary

: align         here aligned org ;
: imove         hmove ;
: link>name     6 + ;
: link>flags    4 + ;
: >body         $10 + ;
: link>         link>name dup c@ + 1+ aligned ;
: ,link         , ;
: find          >r latest begin
                  @ dup if dup link>name r@ si= over current @ <> and
                  else r@ swap true
                  then
                until rdrop
                dup if
                  dup link>
                  swap link>flags c@ $FE <> 1 or
                then ;
: '             bl word find dup 0= if drop count type space $3F emit
                else drop then ;

\ -----------------------------------------------------------------------------
\ -- Compiler

: <builds       align   here latest dup @ ,link  2 allot !
                bl word
                dup dup c@ 1+ here swap imove
                c@ 1+ allot align ;
: ,enter        $B500 h, ;
: ,exit         $BD00 h, ;
: immediate     $FE latest @ link>flags c! ;
: hide          latest @ current ! ;
: reveal        0 current ! ;
: postpone      bl word find 0< if ' lit literal ,call , ' ,call literal ,call
                else ,call
                then ; immediate
: [']           ' postpone literal ; immediate

: :             <builds ,enter hide postpone ] ;
: ;             ,exit reveal postpone ; immediate
: :noname       align latest @ here latest !  , here ; immediate

: docon         $4902 h, $3E04 h, $6030 h, $0008 h, $46F7 h, ;
: dodata        $4679 h, $310C h, $3E04 h, $6030 h, $0008 h, $46F7 h, ;
: create        <builds dodata here , ;
: constant      <builds docon align , ;
: variable      <builds docon align vp dup @ dup , cell+ swap ! ;
: (does>)       here r> 1- latest @ link> #10 + org $B500 h, ,call org ;
: does>         postpone (does>) ; immediate
: recurse       latest @ link> ,call ; immediate
: [char]        char postpone literal ; immediate
: (             [char] ) word drop ; immediate
: \             source# @ >in ! ; immediate
: setbase       ( addr n -- addr' n' )
                over c@ dup 0<> and
                dup [char] $ = if drop $10 else
                dup [char] # = if drop $0A else
                    [char] % = if $02 else exit
                then then then base ! 1/string ;
: ?sign         ( addr n --  addr' n' f )
                over c@ $2C - dup abs 1 = and
                dup if 1+ >r 1/string r> then ;
: >number       ( u addr u --  u' addr' u' )
                setbase
                begin dup while
                  over c@ digit? 0= if drop exit then
                  >r rot base @ * r> + -rot
                  1/string
                repeat ;
: ?number       ( c-addr -- n -1 | c-addr 0 )
                base @ >r
                dup 0 0 rot count
                ?sign >r >number if rdrop 2drop drop 0
                else 2swap 2drop drop r> if negate then
                true then r> base ! ;
: (s")          r> 1- count 2dup + aligned 1+ >r ;
: s"            postpone (s")
                [char] " word dup dup c@ 1+ here swap imove
                c@ 1+ allot align ; immediate

\ -----------------------------------------------------------------------------
\ -- Interpreter

: setup-pointers
                init-dp @ dp !
                init-vp @ vp !
                init-latest @ latest !
                ;

: prompt        [char] o emit [char] k emit cr ;
: source        (source) @ source# @ ;
: interpret     source# !  (source) ! 0 >in !
                begin  bl word  dup c@ while      \ textadr
                  find ?dup if                    \ xt 1/-1
                    1+ state @ 0= or              \ immed or interp?
                    if execute else ,call then
                  else                            \ textadr
                    ?number if                    \ converted ok
                      state @ if postpone literal then
                    else count type [char] ? emit cr then  \ error
                  then
                repeat drop ;
: quit          r0 rp! 0 state !    \ reset stacks, state
                prompt
                setup-pointers
                begin
                  xon
                  tib dup tib# accept space
                  xoff
                  interpret
                  state @ 0= if space [char] o emit [char] k emit cr then
                again ;

: abort         s0 sp! #16 base ! quit ;
: cold          abort ;

\ -----------------------------------------------------------------------------
\ -- Utilities

: words         latest begin @ ?dup while
                  dup link>name count type space
                repeat ;
: list          latest begin @ ?dup while
                  dup link> u. dup link>name count type cr
                repeat ;
